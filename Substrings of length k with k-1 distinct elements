import java.util.HashMap;

class Solution {
    public int substrCount(String s, int k) {
        int n = s.length();
        if (n < k) return 0;
        
        int result = 0;
        HashMap<Character, Integer> freqMap = new HashMap<>();
        
        // Initialize the frequency map for the first window
        for (int i = 0; i < k; i++) {
            char c = s.charAt(i);
            freqMap.put(c, freqMap.getOrDefault(c, 0) + 1);
        }
        if (freqMap.size() == k - 1) {
            result++;
        }
        
        // Slide the window through the string
        for (int i = k; i < n; i++) {
            // Remove the leftmost character of the previous window
            char leftChar = s.charAt(i - k);
            if (freqMap.get(leftChar) == 1) {
                freqMap.remove(leftChar);
            } else {
                freqMap.put(leftChar, freqMap.get(leftChar) - 1);
            }
            
            // Add the new character to the window
            char rightChar = s.charAt(i);
            freqMap.put(rightChar, freqMap.getOrDefault(rightChar, 0) + 1);
            
            // Check if the current window has exactly k-1 distinct characters
            if (freqMap.size() == k - 1) {
                result++;
            }
        }
        
        return result;
    }
}
