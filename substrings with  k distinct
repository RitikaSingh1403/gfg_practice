import java.util.*;

class Solution {
    int countSubstr(String s, int k) {
        return atMostK(s, k) - atMostK(s, k - 1);
    }

    private int atMostK(String s, int k) {
        if (k == 0) return 0;

        int[] freq = new int[26];
        int left = 0, right = 0, unique = 0;
        int count = 0;

        while (right < s.length()) {
            if (freq[s.charAt(right) - 'a'] == 0) {
                unique++;
            }
            freq[s.charAt(right) - 'a']++;
            right++;

            while (unique > k) {
                freq[s.charAt(left) - 'a']--;
                if (freq[s.charAt(left) - 'a'] == 0) {
                    unique--;
                }
                left++;
            }

            count += right - left; // all substrings ending at right - 1
        }

        return count;
    }
}
