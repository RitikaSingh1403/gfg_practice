import java.util.*;

class Solution {
    public int nonLisMaxSum(int[] arr) {
        if (arr == null || arr.length == 0) {
            return 0;
        }
        
        int n = arr.length;
        int[] dp = new int[n];
        Arrays.fill(dp, 1);
        
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < i; j++) {
                if (arr[i] > arr[j]) {
                    dp[i] = Math.max(dp[i], dp[j] + 1);
                }
            }
        }
        
        int maxLength = 0;
        for (int num : dp) {
            maxLength = Math.max(maxLength, num);
        }
        
        // Reconstruct the LIS
        List<Integer> lis = new ArrayList<>();
        int currentLength = maxLength;
        for (int i = n - 1; i >= 0; i--) {
            if (dp[i] == currentLength) {
                lis.add(arr[i]);
                currentLength--;
            }
        }
        Collections.reverse(lis);
        
        // Calculate total sum and LIS sum
        int totalSum = 0;
        for (int num : arr) {
            totalSum += num;
        }
        
        int lisSum = 0;
        for (int num : lis) {
            lisSum += num;
        }
        
        return totalSum - lisSum;
    }
}
